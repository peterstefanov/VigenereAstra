
Contains 842 words. The system is designed to read an input from the user interface, to encrypt it, to decrypt it and crack the password used in the encryption process. To display time taken for accomplishing the tasks and agent's response message on receiving particular task either agree, refuse or failure. For converting the requirements described into working software Multi-Agent System approach fit very well. Multi-Agent System is  an alternative to centralised problem solving, because problems are themselves distributed and because the distribution of problem solving between different agents reveals itself to be more efficient way to organise the problem solving - it can be flexible and allow failures in the system. For solving the problem agents cooperatively exchanging information as the solution is develop.\\ In this system we will have multiple roles, each with well defined set of tasks. The main role will be the Manager, responsible for coordination of all other roles and interaction with the Environment - simple gui implemented in swing. Encryptor and Decryptor are two roles with a single purpose tasks assigned to them - encryption and decryption. More complex role is the Cracker, similar to the Manager role it is responsible for coordination of another two  roles in charge with alphabetic frequency analysis and string processing. These two roles are directly controlled only by the Cracker, so the Manager propagates the responsibility for accomplishing the finding of the password to the Cracker, who employs  this two roles for it. Once the Cracker is done returns back the control to the Manager with the relevant information to continue the process - decrypting the ciphertext. The GAIA methodology is an attempt to define a complete and general methodology that it is specifically tailored to the analysis and design of Multi-Agent System.[2]
GAIA defines the structure of Multi-Agent System in terms of the role model. The model identifies the roles that agents have to play 
within the Multi-Agent System and the interaction protocols between the different roles.The  GAIA analysis phase is the identification of the roles and the modeling of interactions between the roles found. Roles consist of  four attributes: responsibilities, permissions, activities and protocols. The following subsections describe the roles that the agents will play in the system.In its liveness formula describes the order that these protocols and activities will be executed by this role. The activities are tasks that an agent performs without interacting with other agents. Protocols are the specific patterns of interaction. The role of the Manager employs four activities  and  two  protocols(activities are underlined in Protocols and Activities field).The role of the Encryptor employs one activity and two protocols(activities are underlined in Protocols and Activities field). For the liveness the execution of the activities and protocols happens only once per agent lifetime. The agent for this role is created dynamically and once the task is completed it is terminated, it is controlled by the Manager Role. The flexibility provided by ASTRA programming language and how close it is to Java made my choice easy and obvious. Custom Support class was implemented to provide more convenience support for some string and char operations extending directly the Module ASTRA class.\\In the same fashion Vigenere class was implemented by extending ASTRA Module to provide support for frequency analysis as if analysis was implemented in pure ASTRA it was very costly from performance point of view. All what it does is to count the occurrences of letters pattern in English language against several regex and from the set of results find the password, where the criteria bellow need to match for each entry in the password. Letters pattern in English language based on a 10000 word textFor finding the password length pure ASTRA language is used. The agent performing this task iterates through the ciphertext, stores the distance between the same letters and its frequency and from the set of results makes the decision for the length of the password - the one with the highest frequencies is the contender for the password/key length. It is important that, in order the system to find the password used, its length and off course to decrypt the plaintext, a big enough text should be used when encryption is performed. Cryptanalysis of Vigener Cipher are based on the letters pattern and frequency analysis, not on Brute force attack.The Functional Hierarchy Pattern was adopted for the implementation of the system. It was suitable because for solving the problem all agents involved were dependant on the information passed when request is made to perform a task. For the coordination of the agents result sharing approach was used. Each agent has a set of tasks assigned to him at the design time and agents reactively send information to another agent in response to a request. The Manager role has three 'products' - Encryptor, Decryptor and Cracker, where the Cracker him self has another two controlled solely by him. see Figure 2.12. Interaction between the agents is determined at the design time and the Managers agents (Manager and Cracker) are responsible for controlling and coordinating the sub-system activities. 