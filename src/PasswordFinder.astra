agent PasswordFinder {

    module aop.Vigenere vig;
	module aop.utils.Support support;
	module System system;
	
	types my_types{
	    formula state(string);
	    formula cracker(string);
        formula taskPassword(string, int);
        formula done(string, string);
	}
	      
	initial cracker("cracker");      
	
	rule @message(request, string Cracker, taskPassword(string C, int L)) : cracker(Cracker){
	
	     if(C == "" | L == 0) {
            send(refuse, Cracker, state(system.name() + " refused to find password"));
         } else {
            send(agree, Cracker, state(system.name() + " agreed to find password"));
            
            try {
                 !doPassword(C, L);             
            } recover {
                send(failure, Cracker, state(system.name() + " fails to find password"));
            }
        }        
    }
    
    rule +! doPassword(string C, int PL) : cracker(string Cracker){  
        string password = vig.getPassword(C, PL);
        if(password == "") {
            system.fail();
         } else {
            send(inform, Cracker, done(password, C));
         }       
    }
}
