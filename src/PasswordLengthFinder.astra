agent PasswordLengthFinder {

	module Console console;
	module System system;
	module aop.utils.Support support;
	module Strings strs;
	module Prelude prelude;
		
	types my_types{
        formula taskPasswordLength(string);
        formula state(string);
        formula done(int, string);
        formula cracker(string);
	}
	
    initial cracker("cracker");
	
	rule @message(request, string Cracker, taskPasswordLength(string C)) : cracker(Cracker){
         if(C == "") {
            send(refuse, Cracker, state(system.name() + " refused to find password length"));
         } else {
            send(agree, Cracker, state(system.name() + " agreed to find password length"));
            
            try {
                !doPasswordLength(C);             
            } recover {
                send(failure, Cracker, state(system.name() + " fails to find password length"));
            }
        }       
    }
    
    rule +!doPasswordLength(string C) {
        string alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    	int distance = 1;
        list DISTANCE = [];             
        list COUNT = [];

		int i = 0;
		//for each letter in alphabet
		while (i < support.length(alphabet) - 1) {
		    int x = 0;
		    //for each entry in ciphertext
			while (x < support.length(C)) {
                //if entry from ciphertext equals to current letter from alphabet       			
				if (support.equal(strs.charAt(C, x), strs.charAt(alphabet, i))) {
				    //if this distance not in the list add it as first entry and set COUNT to 1 
					if (~prelude.contains(DISTANCE, distance)){
					      DISTANCE = support.addToAt(DISTANCE, 0, distance);
					      COUNT = support.addToAt(COUNT, 0, 1);		
					}else {
					      int y = 0; 
					      while (y < prelude.size(DISTANCE)) {
					            if (prelude.valueAsInt(DISTANCE, y) == distance) {
					               int temp = prelude.valueAsInt(COUNT, y);
					               //update COUNT list
					               boolean done = prelude.remove(COUNT, y);
					               COUNT = support.addToAt(COUNT, y, temp + 1);
					            }
					            y = y + 1; 
					      }
					}
					distance = 1;
				} else {
					distance = distance + 1;
				}
				x = x + 1;
			}
			i = i + 1;
		}	    
	    
	    int S = 0;
	    int MAX = 0;
	    int PASSWORD_LENGTH = 0;
	    while (S < prelude.size(COUNT)) {
	          if (prelude.valueAsInt(COUNT, S) > MAX) {
	             MAX = prelude.valueAsInt(COUNT, S);
	             PASSWORD_LENGTH = prelude.valueAsInt(DISTANCE, S);
	          }
	    S = S + 1;
	    }
	    
	    !doInform(PASSWORD_LENGTH, C);
    }
    
    rule +!doInform(int L, string C) {
        send(inform, "cracker", done(L, C));
    }
}
